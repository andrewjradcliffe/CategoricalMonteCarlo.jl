# Tests of normalization methods

@testset "misc type inference functions" begin
    @test _typeofinv(1) === Float64
    @test _typeofinv(Int) === Float64
    @test _typeofinv(Rational{Int64}) === Rational{Int64}
    #
    ws = ([1,2,3], fill(1/6, 6), fill(1//10, 9))
    @test _typeofprod(ws) === Float64
    ws2 = (ws[1], fill(1//6, 6), ws[3])
    @test _typeofprod(ws2) === Rational{Int64}
    for T ‚àà (Int8, Int16, Int32)
        ws3 = (Int8[1,2,3], T[4,5,6], Int8[7,8,9])
        @test _typeofprod(ws3) === Int64
    end
end

@testset "_u, _checku01" begin
    @test _u(1.0) === 0.5
    @test _u(1//1) === 1//2
    @test _u(0) === 0.0
    @test _u(Inf) === 1.0
    for T ‚àà (Int64, UInt, Float64, BigInt, BigFloat, Rational{Int})
        @test_nowarn _check_u01(zero(T))
        @test_nowarn _check_u01(one(T))
        @test_throws DomainError _check_u01(T(2))
    end
    @test_nowarn _check_u01(0.5)
    @test_nowarn _check_u01(1//2)
    @test_nowarn _check_u01(big(0.5))
end

@testset "algorithm 2.1" begin
    w = [7.3, 10.2, 5.1, 2.7, 2.89]
    p = [1.0]
    for i ‚àà eachindex(w)
        @test algorithm2_1([i], w) ‚âà p
    end
    for I ‚àà ([1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5],
             [1, 2, 3], [1, 2, 4], [1, 2, 5], [2, 3, 4], [2, 3, 5], [3, 4, 5],
             [1, 2, 3, 4], [1, 2, 3, 5], [2, 3, 4, 5],
             [1, 2, 3, 4, 5])
        @test algorithm2_1(I, w) ‚âà w[I] ./ sum(w[I])
    end
    @test algorithm2_1([1, 1, 1], w) ‚âà fill(1/3, 3)
    # non-Float64 Type handling
    I1 = [1]
    I2 = [1, 2]
    for T ‚àà (Float16, Float32, Rational{Int16}, Rational{Int32}, Rational{Int64}, Rational{Int128})
        ùë§ = T.(w)
        @test @inferred algorithm2_1(I1, ùë§) ‚âà T[1]
        @test @inferred algorithm2_1(I2, ùë§) ‚âà ùë§[I2] ./ sum(ùë§[I2])
    end

    # Aberrant behavior
    @testset "weight < 0" begin
        w = [-5, 4, 3, 2, 1];
        I = [1, 5, 2];
        @test algorithm2_1(I, w) == [-Inf, Inf, Inf]
        I = [2, 3]
        @test algorithm2_1(I, w) == [4/7, 3/7]
        I = [1, 2, 2]
        @test algorithm2_1(I, w) == [-prevfloat(5/3), 4/3, 4/3]
    end
    # zeros behavior
    w = zeros(5)
    I = [1, 2, 3]
    @test all(algorithm2_1(I, w) .=== [-NaN, -NaN, -NaN])
    w[3] = 5
    @test algorithm2_1(I, w) == [0.0, 0.0, 1.0]

    @testset "NaN handling (lack thereof)" begin
        # things which generate NaNs by propagation
        w = [2.0, 10.0, 5.0, 1.0, NaN]
        I = [1, 3, 5]
        @test all(algorithm2_1(I, w) .=== [NaN, NaN, NaN])
        I = [1, 5, 5]
        @test all(algorithm2_1(I, w) .=== [NaN, NaN, NaN])
        I = [5, 5, 5]
        @test all(algorithm2_1(I, w) .=== [NaN, NaN, NaN])

        # propagating NaNs with signbit set
        w = [2.0, 10.0, 5.0, 1.0, -NaN]
        I = [1, 3, 5]
        @test all(algorithm2_1(I, w) .=== [-NaN, -NaN, -NaN])
        I = [1, 5, 5]
        @test all(algorithm2_1(I, w) .=== [-NaN, -NaN, -NaN])
        I = [5, 5, 5]
        @test all(algorithm2_1(I, w) .=== [-NaN, -NaN, -NaN])
    end

    @testset "¬±Inf handling (lack thereof)" begin
        w = [2.0, 10.0, 5.0, 1.0, Inf]
        I = [1, 3, 5]
        @test all(algorithm2_1(I, w) .=== [0.0, 0.0, -NaN])
        w = [2.0, 10.0, 5.0, 1.0, prevfloat(Inf)]
        I = [1, 3, 5]
        p = algorithm2_1(I, w)
        @test all(!isnan, p)
        @test all(!isinf, p)
        # integer overflow
        w = [5, 4, 3, 1, typemax(Int) - 1]
        I = [1, 3, 5]
        @test algorithm2_1(I, w) == [-5.421010862427522e-19, -3.2526065174565133e-19, -1.0]
        I = [4, 5] # on the cusp of overflow
        @test algorithm2_1(I, w) == [1.0842021724855044e-19, 1.0]
    end

    @testset "sweep precision (SIMD rounding)" begin
        rng = Xoshiro(1234)
        w = rand(rng, 256)
        p = Vector{Float64}(undef, 0)
        for m = -10:10
            w .*= 10.0^m
            for i = 1:8
                for j = -1:1
                    n = (1 << i) + j
                    I = rand(1:256, n)
                    resize!(p, n)
                    algorithm2_1!(p, I, w)
                    @test all(!iszero, p)
                    @test sum(p) ‚âà 1.0
                end
            end
        end
    end

    @testset "algorithm 2.1, type handling" begin
        w1 = [5/9, 1/9, 3/9, 0, 0]
        w2 = [5//9, 1//9, 3//9, 0, 0]
        w3 = [5, 1, 3, 0, 0]
        p1 = [prevfloat(5/6), prevfloat(1/6), 0.0]
        p2 = [5//6, 1//6, 0]
        p3 = [prevfloat(5/6), 1/6, 0.0]
        I = [1, 2, 5]
        @test @inferred algorithm2_1(I, w) == p1
        @test @inferred algorithm2_1(I, w2) == p2
        @test @inferred algorithm2_1(I, w3) == p3
        p = similar(p1)
        @test @inferred algorithm2_1!(p, I, w1) ‚âà p3
        @test @inferred algorithm2_1!(p, I, w2) ‚âà p3
        @test @inferred algorithm2_1!(p, I, w3) ‚âà p3
        #
        for T ‚àà (Float16, Float32, Float64, BigFloat, Int8, Int16, Int32, Int64, BigInt, Rational{Int8}, Rational{Int16}, Rational{Int32}, Rational{Int64}, Rational{Int128}, Rational{BigInt})
            ùë§ = T.(w3)
            p‚Ä≤ = @inferred algorithm2_1(I, ùë§)
            @test p‚Ä≤ ‚âà p3
        end
    end
end

# _alg2_2(Is, ws) = (p = (.*)(getindex.(ws, Is)...); p .* inv(sum(p)))

@testset "algorithm 2.2" begin
    ws = ([1,2,3], fill(1/6, 6), fill(1//10, 9))
    ws2 = (ws[1], fill(1//6, 6), ws[3])
    Is = ([1,2,3], [4,5,6], [7,8,9])
    p = [1.0]
    p2 = [1//1]
    for i ‚àà 1:3
        I = [i]
        @test @inferred algorithm2_2((I, I, I), ws) == p
        @test @inferred algorithm2_2((I, I, I), ws2) == p2
    end
    p‚Ä≤ = [1/6, 1/3, 1/2]
    p2‚Ä≤ = [1//6, 1//3, 1//2]
    @test @inferred algorithm2_2(Is, ws) == p‚Ä≤
    @test @inferred algorithm2_2(Is, ws2) == p2‚Ä≤
    # Float products
    I = [1,2,3]
    w = fill(1/2,6)
    for n = 1:10
        Is = ntuple(_ -> I, n)
        ws = ntuple(_ -> w, n)
        p = @inferred algorithm2_2(Is, ws)
        @test all(p .‚âà 1/3)
    end
    # Rational products
    w2 = fill(1//2,6)
    for n = 1:10
        Is = ntuple(_ -> I, n)
        ws = ntuple(_ -> w2, n)
        p = @inferred algorithm2_2(Is, ws)
        @test all(p .== 1//3)
    end
    # Mixed products
    w3 = fill(1,6)
    for n = 2:2:12
        Is = ntuple(_ -> I, n)
        ws = tuple(ntuple(_ -> w, n >> 1)..., ntuple(_ -> w2, n >> 1)...)
        p = @inferred algorithm2_2(Is, ws)
        @test all(p .‚âà 1/3)
        ws = tuple(ntuple(_ -> w, n >> 1)..., ntuple(_ -> w3, n >> 1)...)
        p = @inferred algorithm2_2(Is, ws)
        @test all(p .‚âà 1/3)
        Base.setindex(ws, w2, lastindex(ws))
        p = @inferred algorithm2_2(Is, ws)
        @test all(p .‚âà 1/3)
    end
    # Aberrant behavior
    @testset "weight < 0" begin
        w = [-5, 4, 3, 2, 1];
        I = [1, 5, 2];
        Is = (I, [1,2,3], [1,2,3])
        ws = (w, fill(1/6, 6), fill(1//10, 9))
        @test algorithm2_2(Is, ws) == [-Inf, Inf, Inf]
        Is = Base.setindex(Is, [2,3,4], 1)
        @test algorithm2_2(Is, ws) == nextfloat.([4/9, 3/9, 2/9])
        Is = Base.setindex(Is, [1,2,2], 1)
        @test algorithm2_2(Is, ws) == [-prevfloat(5/3), 4/3, 4/3]
    end
    # zeros behavior
    w = zeros(5)
    ws = (w, w, w)
    I = [1, 2, 3]
    Is = (I, I, I)
    @test all(algorithm2_2(Is, ws) .=== [-NaN, -NaN, -NaN])
    w[3] = 5
    @test algorithm2_2(Is, ws) == [0.0, 0.0, 1.0]

    @testset "NaN handling (lack thereof)" begin
        # things which generate NaNs by propagation
        w = [2.0, 10.0, 5.0, 1.0, NaN]
        ws = (w, w, w)
        I = [1, 3, 5]
        Is = (I, I, I)
        @test all(algorithm2_2(Is, ws) .=== [NaN, NaN, NaN])
        I = [1, 5, 5]
        Is = (I, I, I)
        @test all(algorithm2_2(Is, ws) .=== [NaN, NaN, NaN])
        I = [5, 5, 5]
        Is = (I, I, I)
        @test all(algorithm2_2(Is, ws) .=== [NaN, NaN, NaN])

        # propagating NaNs with signbit set
        w = [2.0, 10.0, 5.0, 1.0, -NaN]
        ws = (w, w, w)
        I = [1, 3, 5]
        Is = (I, I, I)
        @test all(algorithm2_2(Is, ws) .=== [-NaN, -NaN, -NaN])
        I = [1, 5, 5]
        Is = (I, I, I)
        @test all(algorithm2_2(Is, ws) .=== [-NaN, -NaN, -NaN])
        I = [5, 5, 5]
        Is = (I, I, I)
        @test all(algorithm2_2(Is, ws) .=== [-NaN, -NaN, -NaN])
    end

    @testset "¬±Inf handling (lack thereof)" begin
        I = [1, 3, 5]
        Is = (I, I, I)
        w = [2.0, 10.0, 5.0, 1.0, Inf]
        ws = (w, w, w)
        @test all(algorithm2_2(Is, ws) .=== [0.0, 0.0, -NaN])
        w = [2.0, 10.0, 5.0, 1.0, prevfloat(Inf)]
        ws = (w, w, w)
        p = algorithm2_2(Is, ws)
        @test all(p .=== [0.0, 0.0, -NaN])
        @test all(!isinf, p)
        # integer overflow
        w = [5, 4, 3, 1, typemax(Int) - 1]
        ws = (w, w, w)
        @test algorithm2_2(Is, ws) == [0.8680555555555555, 0.1875, -0.05555555555555555]
    end

    @testset "sweep precision (SIMD rounding)" begin
        rng = Xoshiro(0xd123456789abcdef)
        w = rand(rng, 256)
        p = Vector{Float64}(undef, 0)
        for M = 2:5
            for m = -10:10
                w .*= 10.0^m
                ws = ntuple(_ -> w, M)
                for i = 1:8
                    for j = -1:1
                        n = (1 << i) + j
                        Is = ntuple(_ -> rand(rng, 1:256, n), M)
                        resize!(p, n)
                        algorithm2_2!(p, Is, ws)
                        @test all(!iszero, p)
                        @test sum(p) ‚âà 1.0
                    end
                end
            end
        end
    end
end

@testset "algorithm 3" begin
    w = [0.0, 10.0, 5.0, 0.0, 2.5]
    p = [0.25, 0.2857142857142857, 0.14285714285714285, 0.25, 0.07142857142857142]
    p‚Ä≤ = algorithm3(w, 0.5)
    @test sum(p‚Ä≤) ‚âà 1.0
    @test p ‚âà p‚Ä≤
    @test algorithm3(w, 1.0) == [0.5, 0.0, 0.0, 0.5, 0.0]
    # u not 0 ‚â§ u ‚â§ 1
    p = [0.75, -0.2857142857142857, -0.14285714285714285, 0.75, -0.07142857142857142]
    @test_throws DomainError algorithm3(w, 1.5)
    @test_throws DomainError algorithm3(w, -0.5)
    # @test p ‚âà p‚Ä≤
    # @test sum(p‚Ä≤) ‚âà 1.0
    # throws where appropriate
    @test_throws DimensionMismatch algorithm3!(p, zeros(6), 0.5)
    @test_throws DimensionMismatch algorithm3!(zeros(6), p, 0.5)
    # zeros behavior
    p = algorithm3(w, 0.0)
    @test p == [0.0, 0.5714285714285714, 0.2857142857142857, 0.0, 0.14285714285714285]
    algorithm3!(p, 1.0)
    @test p == [0.5, 0.0, 0.0, 0.5, 0.0]
    algorithm3!(p, 0.0)
    @test p == [0.5, 0.0, 0.0, 0.5, 0.0]
    p .= 0
    algorithm3!(p, 1.0)
    @test p == fill(0.2, 5)
    p .= 0
    algorithm3!(p, 0.0)
    @test all(p .=== -NaN)
    #
    w = zeros(5)
    for u ‚àà (nextfloat(0.0), eps(), 0.5, prevfloat(1.0), 1.0)
        algorithm3!(p, w, u)
        @test p == fill(0.2, 5)
    end

    @testset "NaN handling (lack thereof)" begin
        # things which generate NaNs
        w = [0.0, 10.0, 5.0, 0.0, NaN]
        p = [0.25, NaN, NaN, 0.25, NaN]
        p‚Ä≤ = algorithm3(w, 0.5)
        @test isequal(p‚Ä≤, p)
        @test p‚Ä≤[1] + p‚Ä≤[4] == 0.5

        w = [1.0, 2.0, 3.0, NaN]
        p‚Ä≤ = algorithm3(w, 0.5)
        @test isequal(p‚Ä≤, fill(NaN, 4))
    end
    @testset "¬±Inf handling (lack thereof)" begin
        w = [0.0, 10.0, 5.0, 0.0, Inf]
        p = [0.25, 0.0, 0.0, 0.25, NaN]
        p‚Ä≤ = algorithm3(w, 0.5)
        @test isequal(p‚Ä≤, p)
        @test sum(p‚Ä≤[1:4]) == 0.5
        w = [0.0, 10.0, 5.0, 0.0, -Inf]
        p = [0.25, -0.0, -0.0, 0.25, -NaN]
        p‚Ä≤ = algorithm3(w, 0.5)
        @test all(p‚Ä≤ .=== p)
        @test sum(p‚Ä≤[1:4]) == 0.5

        w = [1.0, 2.0, 3.0, Inf]
        p = [0.0, 0.0, 0.0, NaN]
        p‚Ä≤ = algorithm3(w, 0.5)
        @test isequal(p‚Ä≤, p)

        # Inf * inv(Inf) -> NaN
        w = [0.0, 0.0, 0.0, Inf]
        p‚Ä≤ = algorithm3(w, 0.5)
        @test sum(p‚Ä≤[1:3]) ‚âà 0.5
        @test isnan(p‚Ä≤[4]) # usually === -NaN, but maybe not always
        w = [0.0, 0.0, 0.0, -Inf]
        p‚Ä≤ = algorithm3(w, 0.5)
        @test sum(p‚Ä≤[1:3]) ‚âà 0.5
        @test isnan(p‚Ä≤[4]) # usually === -NaN, but maybe not always
    end

    @testset "algorithm 3, sweep precision (SIMD rounding)" begin
        rng = Xoshiro(1234)
        w = rand(rng, 256)
        w[rand(rng, 1:256, 64)] .= 0
        x = copyto!(similar(w), w)
        p = similar(w)
        for u = 0.000001:.000001:0.999999
            w .= x .* u
            algorithm3!(p, w, u)
            @test all(!iszero, p)
            @test sum(p) ‚âà 1.0
        end
        # When u = 1.0, all non-zero elements become zero
        u = 1.0
        w .= x .* u
        algorithm3!(p, w, u)
        @test count(iszero, p) == 197 # PRNG initialized as above gives 59 non-zeros
        @test sum(p) ‚âà 1.0
        # When u = 0.0, all non-zero elements are normalized but zero elements remain same
        u = 0.0
        w .= x
        algorithm3!(p, w, u)
        @test count(iszero, p) == 59
        @test sum(p) ‚âà 1.0
        # Large values -- potentially sensitive to very small u's around 1e-6
        for u = 0.0001:0.0001:0.9999
            for i = 1:20
                n = 1 << i
                w .= x .* n
                algorithm3!(p, w, u)
                @test all(!iszero, p)
                @test sum(p) ‚âà 1.0
            end
        end
    end

    @testset "algorithm 3, type handling" begin
        p = [5/9, 1/9, 3/9, 0, 0]
        p2 = [5//9, 1//9, 3//9, 0, 0]
        # conversions should work and be type stable throughout
        @inferred algorithm3!(p, 0.5)
        @inferred algorithm3!(p2, 1)
        # while Integer <: Real, it clearly cannot be normalized in a meaningful manner
        p3 = [5, 1, 3, 0, 0]
        @test_throws InexactError algorithm3!(p3, 0)
        @test_throws InexactError algorithm3!(p3, 1)
        @test_throws DomainError algorithm3!(p3, 999)
        #
        w = [5/9, 1/9, 3/9, 0, 0]
        w2 = [5//9, 1//9, 3//9, 0, 0]
        w3 = [5, 1, 3, 0, 0]
        p = [5/9, 1/9, 3/9, 0, 0]
        p2 = [5//9, 1//9, 3//9, 0, 0]
        p3 = [5, 1, 3, 0, 0]
        @inferred algorithm3!(p, w, 0.5)
        @inferred algorithm3!(p, w3, 0.5)
        @inferred algorithm3!(p2, w2, 0.5)
        @inferred algorithm3!(p2, w2, 1//2)

        @test_throws InexactError algorithm3!(p3, w, 1)
        @test_throws InexactError algorithm3!(p3, w3, 1)
        @test_throws InexactError algorithm3!(p3, w2, 1)
        @test_throws InexactError algorithm3!(p3, w2, 1)
        ps = (algorithm3(w3, 1//2), algorithm3(w3, 0.5), algorithm3(w3, 1), algorithm3(w3, 0))
        for T ‚àà (Float16, Float32, Float64, BigFloat, Int8, Int16, Int32, Int64, BigInt, Rational{Int8}, Rational{Int16}, Rational{Int32}, Rational{Int64}, Rational{Int128}, Rational{BigInt})
            ùë§ = T.(w3)
            for (i, u) ‚àà enumerate((1//2, 0.5, 1, 0))
                p = @inferred algorithm3(ùë§, u)
                @test p ‚âà ps[i]
            end
        end
    end
end


@testset "normalize1" begin
    # An aberrant case
    w = [-1.0, 1.0, 1.0]
    p = normalize1(w)
    @test p == w
    @test sum(p) ‚âà 1.0
    w = abs.(w)
    p = normalize1(w)
    @test p == [1/3, 1/3, 1/3]
    @test sum(p) ‚âà 1.0
    # The usual things
    A = [1.0 2.0; 3.0 4.0]
    B = normalize1(A)
    @test sum(B) ‚âà 1.0
    normalize1!(B)
    @test sum(B) ‚âà 1.0
    A[1] = -1.0
    normalize1!(B, A)
    @test sum(B) ‚âà 1.0
    @test any(‚â§(0.0), B)
    @testset "NaN handling (lack thereof)" begin
        # things which generate NaNs
        A = zeros(2,2)
        @test isequal(normalize1(A), fill(NaN, 2,2))
        # preexisting NaN(s)
        A = [0.0 NaN; 0.0 1.0]
        @test isequal(normalize1(A), fill(NaN, 2,2))
        A = fill(NaN, 2,2)
        @test isequal(normalize1(A), fill(NaN, 2,2))
        A = fill(-NaN, 2,2)
        B = normalize1(A)
        @test all(A .=== B)
        @test all(A .=== -NaN)
    end
    @testset "¬±Inf handling (lack thereof)" begin
        A = [Inf Inf; Inf Inf]
        @test isequal(normalize1(A), fill(NaN, 2,2))
        A = [0.0 Inf; 0.0 1.0]
        @test isequal(normalize1(A), [0.0 NaN; 0.0 0.0])
        A = [0.0 -Inf; 0.0 1.0]
        B = normalize1(A)
        @test isequal(B, [-0.0 NaN; -0.0 -0.0])
        @test isequal(B, [-0.0 -NaN; -0.0 -0.0])
        # is the negative bit on the NaN set? (it should be)
        @test B[1,2] === -NaN
        @test B[1,2] !== NaN
        # propagating negative bit
        normalize1!(A, B)
        @test all(A .=== -NaN)
    end

    # Sweeps: rounding errors, etc.
    rng = Xoshiro(0x434b089281805289)
    for i = 1:20
        for j = -1:1
            n = (1 << i) + j
            w = rand(rng, n)
            p = normalize1(w)
            @test all(!iszero, p)
            @test sum(p) ‚âà 1.0
            @test p ‚âà normalize1(p)
            # x = copyto!(similar(w), w)
            # for u = 0.0001:0.0001:0.9999
            #     w .= x .* u
            #     normalize1!(p, w)
            #     @test all(!iszero, p)
            #     @test sum(p) ‚âà 1.0
            # end
        end
    end
    x = rand(rng, 256)
    x[rand(rng, 1:256, 64)] .= 0
    y = normalize1(x)
    @test count(iszero, x) == count(iszero, y)
    @test sum(y) ‚âà 1.0
    w = similar(x)
    # Large values
    for i = 1:20
        n = 1 << i
        w .= x .* n
        normalize1!(y, w)
        @test sum(y) ‚âà 1.0
        w[129:256] .*= n >> i
        normalize1!(y, w)
        @test sum(y) ‚âà 1.0
    end
    # Small values
    nz = count(iszero, x)
    for u = 0.000001:0.000001:0.999999
        w .= x .* u
        normalize1!(y, w)
        @test sum(y) ‚âà 1.0
        @test count(iszero, y) == nz
        # mixed with large
        w[129:256] .*= 10^6
        @test sum(y) ‚âà 1.0
        @test count(iszero, y) == nz
    end
end


@testset "normalizations, 0 unchanged component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 4, 5]
    w‚ÇÇ = [10, 20, 10, 20, 10]
    p = algorithm2_1(I‚Ä≤, w)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [1/7, 2/7, 1/7, 2/7, 1/7]
end
@testset "normalizations, 1 unchanged component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 4, 5]
    w‚ÇÇ = [10, 20, 0, 20, 10]
    p = algorithm2_1(I‚Ä≤, w)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q[3] == p[3]
    @test q[1] + q[2] + q[4] + q[5] == p[1] + p[2] + p[4] + p[5]
end
@testset "normalizations, 2 unchanged components" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 4, 5]
    w‚ÇÇ = [10, 20, 0, 0, 10]
    p = algorithm2_1(I‚Ä≤, w)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q[3] == p[3] && q[4] == p[4]
    @test q[1] + q[2] + q[5] == p[1] + p[2] + p[5]
end
@testset "normalizations, all unchanged components" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 4, 5]
    w‚ÇÇ = [0, 0, 0, 0, 0]
    p = algorithm2_1(I‚Ä≤, w)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test all(q .== p)
end
@testset "normalizations, 0 unchanged component, 0 unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 4, 5]
    u = 1/2
    w‚ÇÇ = [10, 20, 10, 20, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [1/7, 2/7, 1/7, 2/7, 1/7]
end
@testset "normalizations, 0 unchanged component, 1 unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 4, 0]
    u = 1/2
    w‚ÇÇ = [10, 20, 10, 20, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [1/7, 2/7, 1/7, 2/7, 1/7]
end
@testset "normalizations, 0 unchanged component, 2 unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 0, 0]
    u = 1/2
    w‚ÇÇ = [10, 20, 10, 20, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [1/7, 2/7, 1/7, 2/7, 1/7]
end
@testset "normalizations, 0 unchanged component, all unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [0, 0, 0, 0, 0]
    u = 1/2
    w‚ÇÇ = [10, 20, 10, 20, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [1/7, 2/7, 1/7, 2/7, 1/7]
end
@testset "normalizations, 1 unchanged component, 1 unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 4, 0]
    u = 1/2
    w‚ÇÇ = [10, 20, 0, 20, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [0.14166666666666666, 0.2833333333333333, 0.15000000000000002, 0.2833333333333333, 0.14166666666666666]

    w‚ÇÇ = [10, 20, 10, 20, 0]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q[5] == u
end
@testset "normalizations, 1 unchanged component, 2 unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 0, 0]
    u = 1/2
    w‚ÇÇ = [10, 20, 0, 20, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [1/8, 1/4, 1/4, 1/4, 1/8]

    w‚ÇÇ = [10, 20, 10, 20, 0]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q[5] == u / 2
    @test q == [1/8, 1/4, 1/8, 1/4, 1/4]
end
@testset "normalizations, 2 unchanged component, 2 unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 0, 0]
    u = 1/2
    w‚ÇÇ = [10, 20, 0, 0, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == [1/8, 1/4, 1/4, 1/4, 1/8]

    w‚ÇÇ = [10, 20, 10, 0, 0]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q[5] == u / 2
    @test q == [1/8, 1/4, 1/8, 1/4, 1/4]

    w‚ÇÇ = [0, 20, 10, 20, 0]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q[5] == u / 2
    @test q == [0.16666666666666666, 0.2333333333333333, 0.11666666666666665, 0.2333333333333333, 0.25]
end
@testset "normalizations, all unchanged component, 2 unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [2, 1, 3, 0, 0]
    u = 1/2
    w‚ÇÇ = [0, 0, 0, 0, 0]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q == p
end
@testset "normalizations, 2 unchanged component, all unknown component" begin
    I‚Ä≤ = [1, 2, 3, 4, 5]
    w = [0, 0, 0, 0, 0]
    u = 1/2
    w‚ÇÇ = [10, 20, 0, 0, 10]
    p = algorithm2_1_algorithm3(I‚Ä≤, w, u)
    @test sum(p) ‚âà 1
    q = algorithm4(p, w‚ÇÇ)
    @test sum(q) ‚âà 1
    @test q ‚âà [0.15, 0.3, 0.2, 0.2, 0.15]
end
# @testset "Monte Carlo, re-weighted: 1 unchanged component" begin
#     I‚Ä≤ = [1, 2, 3, 4, 5]
#     w = [2, 1, 3, 4, 5]
#     w‚ÇÇ = [10, 20, 0, 20, 10]
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)
# end
# @testset "Monte Carlo, re-weighted: all unchanged component" begin
#     I‚Ä≤ = [1, 2, 3, 4, 5]
#     w = [2, 1, 3, 4, 5]
#     w‚ÇÇ = [0, 0, 0, 0, 0]
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)
# end
# @testset "Monte Carlo, re-weighted: 1 unchanged component, 0 unknown component" begin
#     I‚Ä≤ = [1, 2, 3, 4, 5]
#     w = [2, 1, 3, 4, 5]
#     w‚ÇÇ = [10, 20, 0, 20, 10]
#     u = 1/2
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, u, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w, u)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)
# end
# @testset "Monte Carlo, re-weighted: 1 unchanged component, 1 unknown component" begin
#     I‚Ä≤ = [1, 2, 3, 4, 5]
#     w = [2, 1, 3, 4, 0]
#     w‚ÇÇ = [10, 20, 0, 20, 10]
#     u = 1/2
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, u, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w, u)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)

#     w = [2, 1, 0, 4, 5]
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, u, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w, u)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)
# end
# @testset "Monte Carlo, re-weighted: 1 unchanged component, 2 unknown component" begin
#     I‚Ä≤ = [1, 2, 3, 4, 5]
#     w = [2, 1, 3, 0, 0]
#     w‚ÇÇ = [10, 20, 0, 20, 10]
#     u = 1/2
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, u, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w, u)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)

#     w = [2, 1, 0, 4, 0]
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, u, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w, u)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)
# end
# @testset "Monte Carlo, re-weighted: 1 unchanged component, all unknown component" begin
#     I‚Ä≤ = [1, 2, 3, 4, 5]
#     w = [0, 0, 0, 0, 0]
#     w‚ÇÇ = [10, 20, 0, 20, 10]
#     u = 1/2
#     A = weightedmcadd1(Int, (I‚Ä≤, w‚ÇÇ), w, u, 10)
#     Œ£ = sum(A, dims=1)
#     @test all(==(1), Œ£)
#     weightedmcadd1!(A, (I‚Ä≤, w‚ÇÇ), w, u)
#     Œ£ = sum(A, dims=1)
#     @test all(==(2), Œ£)
# end
@testset "algorithm4 behavior" begin
    @test isequal(algorithm4(zeros(3), zeros(3)), [NaN, NaN, NaN])
    @test !isequal(algorithm4(rand(3), zeros(3)), [NaN, NaN, NaN])
    @test isequal(algorithm4(zeros(3), rand(3)), [NaN, NaN, NaN])
end
@testset "algorithm4, type handling" begin
    w‚ÇÅ = [1, 1, 1, 1, 0]
    w‚ÇÇ = [2, 1, 3, 0, 5]
    p = [3/22, 3/44, 9/44, 1/4, 15/44]
    p·µ£ = [3//22, 3//44, 9//44, 1//4, 15//44]
    @test algorithm4(w‚ÇÅ, w‚ÇÇ) ‚âà p
    for T ‚àà (Float32, Float64, BigFloat, Rational{Int16}, Rational{Int32}, Rational{Int64}, Rational{Int128}, Rational{BigInt})
        ùë§‚ÇÅ = T.(w‚ÇÅ)
        @test algorithm4(ùë§‚ÇÅ, w‚ÇÇ) ‚âà p rtol=‚àö(eps())
        ùë§‚ÇÇ = T.(w‚ÇÇ)
        @test algorithm4(w‚ÇÅ, ùë§‚ÇÇ) ‚âà p rtol=‚àö(eps())
        ùëù = @inferred algorithm4(ùë§‚ÇÅ, ùë§‚ÇÇ)
        @test eltype(ùëù) === T
        @test ùëù ‚âà p rtol=‚àõ(eps())
    end
    ################
    # Checks and corresponding benchmarks. Use @code_warntype and inspect the type of
    # p[i] = w‚ÇÇ·µ¢ == zero(U) ? c‚ÇÅ * w‚ÇÅ·µ¢ : c‚ÇÇ * w‚ÇÇ·µ¢
    # _v2! : c‚ÇÅ = one(S)/ s‚ÇÅ; c‚ÇÇ = s‚ÇÅ‚Ä≤ * c‚ÇÅ / s‚ÇÇ
    #### 2-arg
    # ùë§‚ÇÅ = Rational.(w‚ÇÅ)
    # ùë§‚ÇÇ = Rational.(w‚ÇÇ)
    # ùê∞‚ÇÅ = Float64.(w‚ÇÅ)
    # ùê∞‚ÇÇ = Float64.(w‚ÇÇ)
    # @code_warntype algorithm4!(p, w‚ÇÅ)
    # @code_warntype algorithm4!(p, ùë§‚ÇÅ)
    # @code_warntype algorithm4!(p·µ£, w‚ÇÅ)
    # # c‚ÇÅ::Rational{Int}, c‚ÇÇ::Float64
    # @code_warntype algorithm4!(p·µ£, ùê∞‚ÇÅ)

    # @code_warntype algorithm4_v2!(p, w‚ÇÅ)
    # @code_warntype algorithm4_v2!(p, ùë§‚ÇÅ)
    # @code_warntype algorithm4_v2!(p·µ£, w‚ÇÅ)
    # # c‚ÇÅ::Rational{Int}, c‚ÇÇ::Float64
    # @code_warntype algorithm4_v2!(p·µ£, ùê∞‚ÇÅ)

    # @benchmark algorithm4!(p, w‚ÇÅ)
    # @benchmark algorithm4!(p, ùë§‚ÇÅ)
    # @benchmark algorithm4!(p·µ£, w‚ÇÅ)
    # @benchmark algorithm4!(p·µ£, ùê∞‚ÇÅ)

    # @benchmark algorithm4_v2!(p, w‚ÇÅ)
    # @benchmark algorithm4_v2!(p, ùë§‚ÇÅ)
    # @benchmark algorithm4_v2!(p·µ£, w‚ÇÅ)
    # @benchmark algorithm4_v2!(p·µ£, ùê∞‚ÇÅ)
    # #### 3-arg
    # @code_warntype algorithm4!(p, w‚ÇÅ, w‚ÇÇ)
    # @code_warntype algorithm4!(p, ùë§‚ÇÅ, w‚ÇÇ)
    # # s‚ÇÅ::Float64, s‚ÇÇ::Rational{Int}
    # @code_warntype algorithm4!(p, w‚ÇÅ, ùë§‚ÇÇ)
    # #
    # @code_warntype algorithm4!(p·µ£, w‚ÇÅ, w‚ÇÇ)
    # @code_warntype algorithm4_v2!(p·µ£, w‚ÇÅ, w‚ÇÇ)
    # #
    # @code_warntype algorithm4!(p·µ£, ùë§‚ÇÅ, w‚ÇÇ)
    # @code_warntype algorithm4_v2!(p·µ£, ùë§‚ÇÅ, w‚ÇÇ)
    # # c‚ÇÅ::Float64, c‚ÇÇ::Rational{Int}
    # @code_warntype algorithm4!(p·µ£, w‚ÇÅ, ùë§‚ÇÇ)
    # @code_warntype algorithm4_v2!(p·µ£, w‚ÇÅ, ùë§‚ÇÇ)
    # #
    # @benchmark algorithm4!($p·µ£, $ùë§‚ÇÅ, $w‚ÇÇ)
    # @benchmark algorithm4_v2!($p·µ£, $ùë§‚ÇÅ, $w‚ÇÇ)
    # #
    # @benchmark algorithm4!($p·µ£, $w‚ÇÅ, $ùë§‚ÇÇ)
    # @benchmark algorithm4_v2!($p·µ£, $w‚ÇÅ, $ùë§‚ÇÇ)
    # #
    # @benchmark algorithm4!($p·µ£, $ùë§‚ÇÅ, $ùë§‚ÇÇ)
    # @benchmark algorithm4_v2!($p·µ£, $ùë§‚ÇÅ, $ùë§‚ÇÇ)
    # #
    # @benchmark algorithm4!($p, $ùë§‚ÇÅ, $w‚ÇÇ)
    # @benchmark algorithm4_v2!($p, $ùë§‚ÇÅ, $w‚ÇÇ)
    # #
    # @benchmark algorithm4!($p, $w‚ÇÅ, $ùë§‚ÇÇ)
    # @benchmark algorithm4_v2!($p, $w‚ÇÅ, $ùë§‚ÇÇ)
    # #
    # @benchmark algorithm4!($p, $ùë§‚ÇÅ, $ùë§‚ÇÇ)
    # @benchmark algorithm4_v2!($p, $ùë§‚ÇÅ, $ùë§‚ÇÇ)
    # ####
    # @code_warntype algorithm4!(p, ùê∞‚ÇÅ, ùë§‚ÇÇ)
    # #
    # @code_warntype algorithm4!(p·µ£, ùê∞‚ÇÅ, ùê∞‚ÇÇ)
    # @code_warntype algorithm4_v2!(p·µ£, ùê∞‚ÇÅ, ùê∞‚ÇÇ)
    # #
    # @code_warntype algorithm4!(p·µ£, ùë§‚ÇÅ, ùê∞‚ÇÇ)
    # @code_warntype algorithm4_v2!(p·µ£, ùë§‚ÇÅ, ùê∞‚ÇÇ)
    # # s‚ÇÅ::Float64, s‚ÇÇ::Rational{Int}
    # @code_warntype algorithm4!(p·µ£, ùê∞‚ÇÅ, ùë§‚ÇÇ)
    # @code_warntype algorithm4_v2!(p·µ£, ùê∞‚ÇÅ, ùë§‚ÇÇ)
    # #
    # @benchmark algorithm4!($p·µ£, $ùë§‚ÇÅ, $ùê∞‚ÇÇ)
    # @benchmark algorithm4_v2!($p·µ£, $ùë§‚ÇÅ, $ùê∞‚ÇÇ)
    # #
    # @benchmark algorithm4!($p·µ£, $ùê∞‚ÇÅ, $ùë§‚ÇÇ)
    # @benchmark algorithm4_v2!($p·µ£, $ùê∞‚ÇÅ, $ùë§‚ÇÇ)
    # #
    # @benchmark algorithm4!($p·µ£, $ùê∞‚ÇÅ, $ùê∞‚ÇÇ)
    # @benchmark algorithm4_v2!($p·µ£, $ùê∞‚ÇÅ, $ùê∞‚ÇÇ)
    # #
    # @benchmark algorithm4!($p, $ùë§‚ÇÅ, $ùê∞‚ÇÇ)
    # @benchmark algorithm4_v2!($p, $ùë§‚ÇÅ, $ùê∞‚ÇÇ)
    # #
    # @benchmark algorithm4!($p, $ùê∞‚ÇÅ, $ùë§‚ÇÇ)
    # @benchmark algorithm4_v2!($p, $ùê∞‚ÇÅ, $ùë§‚ÇÇ)
    # #
    # @benchmark algorithm4!($p, $ùê∞‚ÇÅ, $ùê∞‚ÇÇ)
    # @benchmark algorithm4_v2!($p, $ùê∞‚ÇÅ, $ùê∞‚ÇÇ)
    # #
end
@testset "algorithm3, algorithm4, application order effects" begin
    # 3 -> 4, w‚ÇÅ ‚àå 0, w‚ÇÇ ‚àã 0
    w‚ÇÅ = [1., 2, 3, 4, 5]
    w‚ÇÇ = [2, 1, 3, 4, 0]
    u = 0.5
    œâ‚ÇÅ = algorithm3(w‚ÇÅ, u)
    @test œâ‚ÇÅ ‚âà w‚ÇÅ ./ sum(w‚ÇÅ)
    œâ = algorithm4(œâ‚ÇÅ, w‚ÇÇ)
    @test sum(œâ) ‚âà 1
    @test œâ[5] == œâ‚ÇÅ[5]
    @test œâ ‚ââ algorithm4(rand(5), w‚ÇÇ)
    # 3 -> 4, w‚ÇÅ ‚àã 0, w‚ÇÇ ‚àå 0
    w‚ÇÅ = [1., 2, 3, 4, 0]
    w‚ÇÇ = [2, 1, 3, 4, 5]
    u = 0.5
    œâ‚ÇÅ = algorithm3(w‚ÇÅ, u)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test 0 ‚àâ œâ‚ÇÅ
    @test œâ‚ÇÅ[5] == u
    œâ = algorithm4(œâ‚ÇÅ, w‚ÇÇ)
    @test sum(œâ) ‚âà 1
    @test œâ ‚âà algorithm4(rand(5), w‚ÇÇ)
    # 3 -> 4, w‚ÇÅ ‚àå 0, w‚ÇÇ ‚àå 0
    w‚ÇÅ = [1., 2, 3, 4, 5]
    w‚ÇÇ = [2, 1, 3, 4, 1]
    u = 0.5
    œâ‚ÇÅ = algorithm3(w‚ÇÅ, u)
    @test œâ‚ÇÅ ‚âà w‚ÇÅ ./ sum(w‚ÇÅ)
    œâ = algorithm4(œâ‚ÇÅ, w‚ÇÇ)
    @test sum(œâ) ‚âà 1
    @test œâ[5] ‚ââ œâ‚ÇÅ[5]
    # 3 -> 4, w‚ÇÅ ‚àã 0, w‚ÇÇ ‚àã 0
    # sub-case 1: J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ = ‚àÖ
    w‚ÇÅ = [1., 2, 3, 4, 0]
    w‚ÇÇ = [2, 1, 3, 4, 0]
    u = 0.5
    œâ‚ÇÅ = algorithm3(w‚ÇÅ, u)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test 0 ‚àâ œâ‚ÇÅ
    œâ = algorithm4(œâ‚ÇÅ, w‚ÇÇ)
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test sum(œâ) ‚âà 1
    @test isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    @test œâ[5] == œâ‚ÇÅ[5]
    @test œâ ‚ââ algorithm4(rand(5), w‚ÇÇ)
    # sub-case 2: J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ ‚â† ‚àÖ
    w‚ÇÅ = [1., 2, 3, 4, 0]
    w‚ÇÇ = [2, 1, 0, 0, 5]
    u = 0.5
    œâ‚ÇÅ = algorithm3(w‚ÇÅ, u)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test 0 ‚àâ œâ‚ÇÅ
    œâ = algorithm4(œâ‚ÇÅ, w‚ÇÇ)
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test sum(œâ) ‚âà 1
    @test !isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    @test œâ[3] == œâ‚ÇÅ[3] && œâ[4] == œâ‚ÇÅ[4]
    ####
    # 4 -> 3, w‚ÇÅ ‚àå 0, w‚ÇÇ ‚àã 0
    # J‚ÇÅ‚Ä≤ = ‚àÖ, J‚ÇÇ ‚â† ‚àÖ, thus, some elements reweighted (i.e. ‚àà I‚ÇÇ‚Ä≤)
    w‚ÇÅ = [1., 2, 3, 4, 5]
    w‚ÇÇ = [2, 1, 3, 4, 0]
    u = 0.5
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ[5] == w‚ÇÅ[5] / sum(w‚ÇÅ)
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ == œâ‚ÇÅ
    # 4 -> 3, w‚ÇÅ ‚àã 0, w‚ÇÇ ‚àå 0
    w‚ÇÅ = [1., 2, 3, 4, 0]
    w‚ÇÇ = [2, 1, 3, 4, 1]
    u = 0.5
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ[5] ‚ââ w‚ÇÅ[5] / sum(w‚ÇÅ)
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ == œâ‚ÇÅ
    # 4 -> 3, w‚ÇÅ ‚àå 0, w‚ÇÇ ‚àå 0
    w‚ÇÅ = [1., 2, 3, 4, 5]
    w‚ÇÇ = [2, 1, 3, 4, 1]
    u = 0.5
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ == œâ‚ÇÅ
    # 4 -> 3, w‚ÇÅ ‚àã 0, w‚ÇÇ ‚àã 0
    # sub-case 1: J‚ÇÅ ‚à© J‚ÇÇ ‚â† ‚àÖ, J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ = ‚àÖ
    # elements ‚àà J‚ÇÅ ‚à© J‚ÇÇ are remain zero after application of 4,
    # no zero elements become non-zero as J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ = ‚àÖ
    w‚ÇÅ = [1., 2, 3, 4, 0]
    w‚ÇÇ = [2, 1, 3, 4, 0]
    u = 0.5
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, J‚ÇÇ)
    @test isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ[5] == 0.0
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚âà w‚ÇÇ ./ sum(w‚ÇÇ)
    @test sum(œâ‚ÇÅ[J‚ÇÇ]) ‚âà sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÅ‚Ä≤])
    @test sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÇ‚Ä≤]) ‚âà sum(œâ‚ÇÅ[J‚ÇÇ]) / sum(œâ‚ÇÅ[I‚ÇÇ‚Ä≤])
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ[5] == u
    # sub-case 2: J‚ÇÅ ‚à© J‚ÇÇ = ‚àÖ, J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ ‚â† ‚àÖ
    # no zero elements preserved on application of 4.
    w‚ÇÅ = [1., 2, 3, 4, 0]
    w‚ÇÇ = [2, 1, 3, 0, 5]
    u = 0.5
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test isdisjoint(J‚ÇÅ, J‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ[4] == w‚ÇÅ[4] / sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚ââ w‚ÇÇ ./ sum(w‚ÇÇ)
    @test sum(œâ‚ÇÅ[J‚ÇÇ]) ‚âà sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÅ‚Ä≤])
    @test sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÇ‚Ä≤]) ‚âà sum(œâ‚ÇÅ[J‚ÇÇ]) / sum(œâ‚ÇÅ[I‚ÇÇ‚Ä≤])
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ == œâ‚ÇÅ
    # sub-case 3: J‚ÇÅ ‚à© J‚ÇÇ ‚â† ‚àÖ, |J‚ÇÅ| > |J‚ÇÅ ‚à© J‚ÇÇ|, J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ ‚â† ‚àÖ
    # elements ‚àà J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ become non-zero
    # elements J‚ÇÅ ‚àñ I‚ÇÇ‚Ä≤ = J‚ÇÅ ‚à© J‚ÇÇ remain the same on application of 4
    w‚ÇÅ = [1., 2, 3, 0, 0]
    w‚ÇÇ = [2, 1, 3, 4, 0]
    u = 0.5
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, J‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ[5] == 0.0
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚âà w‚ÇÇ ./ sum(w‚ÇÇ)
    @test sum(œâ‚ÇÅ[J‚ÇÇ]) ‚âà sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÅ‚Ä≤])
    @test sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÇ‚Ä≤]) ‚âà sum(œâ‚ÇÅ[J‚ÇÇ]) / sum(œâ‚ÇÅ[I‚ÇÇ‚Ä≤])
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ[5] == u
    # sub-case 4: J‚ÇÅ ‚à© J‚ÇÇ ‚â† ‚àÖ, |J‚ÇÇ| > |J‚ÇÅ ‚à© J‚ÇÇ|, J‚ÇÇ ‚äá J‚ÇÅ, J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ = ‚àÖ
    # J‚ÇÅ ‚à© J‚ÇÇ remain zero
    w‚ÇÅ = [1., 2, 0, 4, 0]
    w‚ÇÇ = [0, 1, 0, 4, 0]
    u = 0.5
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, J‚ÇÇ)
    @test isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    @test !isdisjoint(J‚ÇÇ, I‚ÇÅ‚Ä≤)
    @test J‚ÇÇ ‚äá J‚ÇÅ
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ[3] == œâ‚ÇÅ[5] == 0.0
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚ââ w‚ÇÇ ./ sum(w‚ÇÇ)
    @test sum(œâ‚ÇÅ[J‚ÇÇ]) ‚âà sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÅ‚Ä≤])
    @test sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÇ‚Ä≤]) ‚âà sum(œâ‚ÇÅ[J‚ÇÇ]) / sum(œâ‚ÇÅ[I‚ÇÇ‚Ä≤])
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ[3] == œâ[5] == u / 2
    # sub-case 5: J‚ÇÅ ‚à© J‚ÇÇ ‚â† ‚àÖ, |J‚ÇÇ| > |J‚ÇÅ ‚à© J‚ÇÇ|, J‚ÇÇ ‚äâ J‚ÇÅ, J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ ‚â† ‚àÖ
    # elements ‚àà J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ become non-zero
    # J‚ÇÅ ‚à© J‚ÇÇ remain zero
    w‚ÇÅ = [1., 2, 0, 4, 0]
    w‚ÇÇ = [0, 0, 2, 4, 0]
    u = 0.5
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, J‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    @test !isdisjoint(J‚ÇÇ, I‚ÇÅ‚Ä≤)
    @test J‚ÇÇ ‚äâ J‚ÇÅ
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ[5] == 0.0
    @test œâ‚ÇÅ[3] != 0.0
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚ââ w‚ÇÇ ./ sum(w‚ÇÇ)
    @test sum(œâ‚ÇÅ[J‚ÇÇ]) ‚âà sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÅ‚Ä≤])
    @test sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÇ‚Ä≤]) ‚âà sum(œâ‚ÇÅ[J‚ÇÇ]) / sum(œâ‚ÇÅ[I‚ÇÇ‚Ä≤])
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ[5] == u
    # sub-case 6: J‚ÇÅ ‚à© J‚ÇÇ ‚â† ‚àÖ, |J‚ÇÇ| ‚âØ |J‚ÇÅ ‚à© J‚ÇÇ|, J‚ÇÇ ‚äâ J‚ÇÅ, J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ ‚â† ‚àÖ
    # elements ‚àà J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ become non-zero
    # elements ‚àà (J‚ÇÇ ‚à© I‚ÇÅ‚Ä≤) ‚à™ (J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤) are affected
    # J‚ÇÅ ‚à© J‚ÇÇ remain zero
    # elements ‚àà J‚ÇÇ ‚à© I‚ÇÅ‚Ä≤ become œâ·µ¢ = w‚ÇÅ·µ¢ / sum(w‚ÇÅ)
    w‚ÇÅ = [1., 2, 0, 4, 0]
    w‚ÇÇ = [2, 0, 3, 0, 0]
    u = 0.5
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, J‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    @test !isdisjoint(J‚ÇÇ, I‚ÇÅ‚Ä≤)
    @test J‚ÇÇ ‚äâ J‚ÇÅ
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ[2] == w‚ÇÅ[2] / sum(w‚ÇÅ)
    @test œâ‚ÇÅ[4] == w‚ÇÅ[4] / sum(w‚ÇÅ)
    @test œâ‚ÇÅ[3] != 0.0
    @test œâ‚ÇÅ[5] == 0.0
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚ââ w‚ÇÇ ./ sum(w‚ÇÇ)
    @test sum(œâ‚ÇÅ[J‚ÇÇ]) ‚âà sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÅ‚Ä≤])
    @test sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÇ‚Ä≤]) ‚âà sum(œâ‚ÇÅ[J‚ÇÇ]) / sum(œâ‚ÇÅ[I‚ÇÇ‚Ä≤])
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ[5] == u
    # sub-case 7: J‚ÇÅ ‚à© J‚ÇÇ ‚â† ‚àÖ, |J‚ÇÅ| > |J‚ÇÅ ‚à© J‚ÇÇ|, J‚ÇÅ ‚äá J‚ÇÅ, J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ ‚â† ‚àÖ, J‚ÇÇ ‚à© I‚ÇÅ‚Ä≤ = ‚àÖ
    # Essentially, w‚ÇÇ overwrites w‚ÇÅ, because it re-weights all of the probability mass
    # elements ‚àà J‚ÇÅ ‚à© I‚ÇÇ‚Ä≤ become non-zero
    w‚ÇÅ = [1., 2, 0, 0, 0]
    w‚ÇÇ = [5, 1, 3, 0, 0]
    u = 0.5
    J‚ÇÅ = findall(iszero, w‚ÇÅ)
    J‚ÇÇ = findall(iszero, w‚ÇÇ)
    I‚ÇÅ‚Ä≤ = findall(!iszero, w‚ÇÅ)
    I‚ÇÇ‚Ä≤ = findall(!iszero, w‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, J‚ÇÇ)
    @test !isdisjoint(J‚ÇÅ, I‚ÇÇ‚Ä≤)
    @test isdisjoint(J‚ÇÇ, I‚ÇÅ‚Ä≤)
    @test J‚ÇÅ ‚äá J‚ÇÅ
    œâ‚ÇÅ = algorithm4(w‚ÇÅ, w‚ÇÇ)
    @test sum(œâ‚ÇÅ) ‚âà 1
    @test œâ‚ÇÅ[3] != 0.0
    @test œâ‚ÇÅ[4] == 0.0
    @test œâ‚ÇÅ[5] == 0.0
    @test œâ‚ÇÅ ‚ââ w‚ÇÅ ./ sum(w‚ÇÅ)
    @test œâ‚ÇÅ ‚âà w‚ÇÇ ./ sum(w‚ÇÇ)
    @test sum(œâ‚ÇÅ[J‚ÇÇ]) ‚âà sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÅ‚Ä≤])
    @test sum(w‚ÇÅ[J‚ÇÇ]) / sum(w‚ÇÅ[I‚ÇÇ‚Ä≤]) ‚âà sum(œâ‚ÇÅ[J‚ÇÇ]) / sum(œâ‚ÇÅ[I‚ÇÇ‚Ä≤])
    œâ = algorithm3(œâ‚ÇÅ, u)
    @test sum(œâ) ‚âà 1
    @test œâ[4] == u / 2
    @test œâ[5] == u / 2
end
